// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ReactJSAndASP.Models;

#nullable disable

namespace ReactJSAndASP
{
    public partial class RestaurantContext : DbContext
    {
        public RestaurantContext()
        {
        }

        public RestaurantContext(DbContextOptions<RestaurantContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AccountClient> AccountClient { get; set; }
        public virtual DbSet<Booking> Booking { get; set; }
        public virtual DbSet<BookingInPaymentMap> BookingInPaymentMap { get; set; }
        public virtual DbSet<FastFood> FastFood { get; set; }
        public virtual DbSet<PaymentOfBooking> PaymentOfBooking { get; set; }
        public virtual DbSet<Users> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS");

            modelBuilder.Entity<AccountClient>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fio)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FIO");
            });

            modelBuilder.Entity<Booking>(entity =>
            {
                entity.HasIndex(e => e.BookingTime, "IX_Order");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.BookingTime).HasColumnType("datetime");

                entity.HasOne(d => d.AccountClient)
                    .WithMany(p => p.Booking)
                    .HasForeignKey(d => d.AccountClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_AccountClient");

                entity.HasOne(d => d.FastFood)
                    .WithMany(p => p.Booking)
                    .HasForeignKey(d => d.FastFoodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_FastFood");
            });

            modelBuilder.Entity<BookingInPaymentMap>(entity =>
            {
                entity.Property(e => e.BookingInPaymentMapId).ValueGeneratedNever();

                entity.HasOne(d => d.Booking)
                    .WithMany(p => p.BookingInPaymentMap)
                    .HasForeignKey(d => d.BookingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderInPaymentMap_Order");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.BookingInPaymentMap)
                    .HasForeignKey(d => d.PaymentId)
                    .HasConstraintName("FK_OrderInPaymentMap_PaymentOfOrder");
            });

            modelBuilder.Entity<FastFood>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.NameFastFood)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Price).HasColumnType("decimal(38, 0)");
            });

            modelBuilder.Entity<PaymentOfBooking>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.TotalOrders).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.AccountClient)
                    .WithMany(p => p.PaymentOfBooking)
                    .HasForeignKey(d => d.AccountClientId)
                    .HasConstraintName("FK_PaymentOfBooking_AccountClient");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}